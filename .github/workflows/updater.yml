name: Updater
run-name: Updater for ${{ github.event.workflow_run.head_branch }}

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
    branches:
      - "**"

permissions:
  contents: write

jobs:
  check-release:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    name: Check Release Status
    outputs:
      release_id: ${{ steps.get-release.outputs.release_id }}
      version: ${{ steps.get-release.outputs.version }}
    steps:
      - name: Get latest release
        id: get-release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              const releases = await github.rest.repos.listReleases({
                owner,
                repo,
                per_page: 1,
              });
              
              if (releases.data.length === 0) {
                console.log("No releases found");
                return { release_id: '', version: '' };
              }
              
              const latestRelease = releases.data[0];
              console.log(`Latest release: ${latestRelease.tag_name}`);
              
              return { 
                release_id: latestRelease.id.toString(),
                version: latestRelease.tag_name
              };
            } catch (error) {
              console.error("Error fetching releases:", error);
              return { release_id: '', version: '' };
            }
  
  generate-updater:
    needs: check-release
    if: needs.check-release.outputs.release_id != ''
    runs-on: ubuntu-latest
    name: Generate Updater Files
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install tauri-cli
        run: cargo install tauri-cli --version "^1.5"
      
      - name: Download release assets metadata
        id: download-assets
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = ${{ needs.check-release.outputs.release_id }};
            
            const assets = await github.rest.repos.listReleaseAssets({
              owner,
              repo,
              release_id
            });
            
            // Create asset list, exclude fixed-webview2 versions and sig files
            const standardAssets = assets.data
              .filter(asset => 
                !asset.name.includes('_fixed-webview2') && 
                !asset.name.endsWith('.sig') &&
                !asset.name.includes('darwin-universal')
              )
              .map(asset => ({
                name: asset.name,
                url: asset.browser_download_url,
                id: asset.id
              }));
            
            console.log(`Found ${standardAssets.length} standard release assets`);
            return { assets: JSON.stringify(standardAssets) };

      - name: Generate updater JSON
        run: |
          assets='${{ fromJson(steps.download-assets.outputs.assets) }}'
          version='${{ needs.check-release.outputs.version }}'
          
          echo "Assets: $assets"
          echo "Version: $version"
          
          # Create temporary directory
          mkdir -p updater-tmp
          cd updater-tmp
          
          # Create asset manifest JSON
          echo "$assets" > assets.json
          
          # Generate update files
          cargo tauri migrate
          
          # Use version number instead of 'latest' to distinguish different versions of update files
          cargo tauri updater --version $version

      - name: Upload updater files to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const release_id = ${{ needs.check-release.outputs.release_id }};
            
            // Find generated update files
            const updaterDir = 'updater-tmp';
            const files = fs.readdirSync(updaterDir).filter(f => f.endsWith('.json'));
            
            // Read basic update file content
            let content = {};
            if (files.length > 0) {
              const mainUpdaterFile = files.find(f => f !== 'latest.json') || files[0];
              const updaterContent = fs.readFileSync(`${updaterDir}/${mainUpdaterFile}`, 'utf8');
              content = JSON.parse(updaterContent);
            }
            
            // Create final update file
            const finalContent = {
              version: '${{ needs.check-release.outputs.version }}'.replace('v', ''),
              notes: 'See release notes on GitHub',
              pub_date: new Date().toISOString(),
              platforms: content.platforms || {}
            };
            
            // Save to final JSON file
            const updaterJson = JSON.stringify(finalContent, null, 2);
            fs.writeFileSync('latest.json', updaterJson);
            
            // Upload to GitHub Release
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name: 'latest.json',
              data: fs.readFileSync('latest.json')
            });
            
            console.log('Standard updater file uploaded to release');
  
  generate-webview2-updater:
    needs: check-release
    if: needs.check-release.outputs.release_id != ''
    runs-on: ubuntu-latest
    name: Generate Fixed WebView2 Updater Files
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install tauri-cli
        run: cargo install tauri-cli --version "^1.5"
      
      - name: Download release assets metadata
        id: download-assets
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = ${{ needs.check-release.outputs.release_id }};
            
            const assets = await github.rest.repos.listReleaseAssets({
              owner,
              repo,
              release_id
            });
            
            // Create asset list, only include fixed-webview2 versions and exclude sig files
            const webview2Assets = assets.data
              .filter(asset => 
                asset.name.includes('_fixed-webview2') && 
                !asset.name.endsWith('.sig')
              )
              .map(asset => ({
                name: asset.name,
                url: asset.browser_download_url,
                id: asset.id
              }));
            
            console.log(`Found ${webview2Assets.length} WebView2 fixed release assets`);
            return { assets: JSON.stringify(webview2Assets) };

      - name: Generate updater JSON for WebView2 fixed version
        run: |
          assets='${{ fromJson(steps.download-assets.outputs.assets) }}'
          version='${{ needs.check-release.outputs.version }}'
          
          echo "WebView2 Assets: $assets"
          echo "Version: $version"
          
          # Create temporary directory
          mkdir -p updater-webview2-tmp
          cd updater-webview2-tmp
          
          # Create asset manifest JSON
          echo "$assets" > assets.json
          
          # Generate update files
          cargo tauri migrate
          
          # Use version number instead of 'latest' to distinguish different versions of update files
          cargo tauri updater --version $version

      - name: Upload WebView2 updater files to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const release_id = ${{ needs.check-release.outputs.release_id }};
            
            // Find generated update files
            const updaterDir = 'updater-webview2-tmp';
            const files = fs.readdirSync(updaterDir).filter(f => f.endsWith('.json'));
            
            // Read basic update file content
            let content = {};
            if (files.length > 0) {
              const mainUpdaterFile = files.find(f => f !== 'latest.json') || files[0];
              const updaterContent = fs.readFileSync(`${updaterDir}/${mainUpdaterFile}`, 'utf8');
              content = JSON.parse(updaterContent);
            }
            
            // Create final update file - WebView2 fixed version
            const finalContent = {
              version: '${{ needs.check-release.outputs.version }}'.replace('v', ''),
              notes: 'See release notes on GitHub',
              pub_date: new Date().toISOString(),
              platforms: content.platforms || {}
            };
            
            // Save to final JSON file
            const updaterJson = JSON.stringify(finalContent, null, 2);
            fs.writeFileSync('latest_fixed_webview2.json', updaterJson);
            
            // Upload to GitHub Release
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name: 'latest_fixed_webview2.json',
              data: fs.readFileSync('latest_fixed_webview2.json')
            });
            
            console.log('WebView2 fixed updater file uploaded to release'); 