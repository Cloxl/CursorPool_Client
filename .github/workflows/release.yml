name: Release
run-name: ${{ github.sha != '' && format('Release {0}', github.sha) || github.workflow }}

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  create-dev-version:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: macos-latest
    outputs:
      dev_version: ${{ steps.set_dev_version.outputs.dev_version }}
      commit_hash: ${{ steps.get_commit_hash.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get commit hash
        id: get_commit_hash
        run: echo "short_sha=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: generate dev version
        id: set_dev_version
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")
          DATE=$(date +'%Y%m%d%H%M')
          COMMIT_HASH="${{ steps.get_commit_hash.outputs.short_sha }}"
          DEV_VERSION="${BASE_VERSION}-dev.${DATE}.${COMMIT_HASH}"
          echo "dev_version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "generated dev version: ${DEV_VERSION}"
          
          npm version --no-git-tag-version "${DEV_VERSION}"
          
          cd src-tauri
          sed -i "" "s/^version = \".*\"/version = \"${DEV_VERSION}\"/" Cargo.toml
  
  build-dev-version:
    needs: create-dev-version
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''
            
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: update version (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $DEV_VERSION="${{ needs.create-dev-version.outputs.dev_version }}"
          npm version --no-git-tag-version $DEV_VERSION
          
          cd src-tauri
          (Get-Content Cargo.toml) -replace '^version = ".*"', "version = `"$DEV_VERSION`"" | Set-Content Cargo.toml
          
      - name: update version (macOS)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          DEV_VERSION="${{ needs.create-dev-version.outputs.dev_version }}"
          npm version --no-git-tag-version "${DEV_VERSION}"
          
          cd src-tauri
          sed -i "" "s/^version = \".*\"/version = \"${DEV_VERSION}\"/" Cargo.toml

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || matrix.platform == 'macos-14' && 'aarch64-apple-darwin' || '' }}

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-14'
        run: |
          brew install openssl@3

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: npm install

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          
      - name: upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ needs.create-dev-version.outputs.commit_hash }}
          path: |
            src-tauri/target/*/bundle/dmg/*.dmg
            src-tauri/target/*/bundle/deb/*.deb
            src-tauri/target/*/bundle/appimage/*.AppImage
            src-tauri/target/*/bundle/msi/*.msi
            src-tauri/target/*/bundle/nsis/*.exe
          if-no-files-found: ignore

  publish-tauri:
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get Version (Windows)
        if: matrix.platform == 'windows-latest'
        id: get_version_windows
        shell: pwsh
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $env:GITHUB_OUTPUT

      - name: Get Version (Unix)
        if: matrix.platform != 'windows-latest'
        id: get_version_unix
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || matrix.platform == 'macos-14' && 'aarch64-apple-darwin' || '' }}

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-14'
        run: |
          brew install openssl@3

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: npm install

      - name: Create Release
        if: matrix.platform == 'macos-14'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version_unix.outputs.version }}
          name: ${{ steps.get_version_unix.outputs.version }}
          draft: false
          prerelease: false

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ matrix.platform == 'windows-latest' && steps.get_version_windows.outputs.version || steps.get_version_unix.outputs.version }}
          releaseName: ${{ matrix.platform == 'windows-latest' && steps.get_version_windows.outputs.version || steps.get_version_unix.outputs.version }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}