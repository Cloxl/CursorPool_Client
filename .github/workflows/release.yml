name: Release
run-name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '' }}

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-tauri:
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'
            args: '--target aarch64-apple-darwin'
            display_name: 'macOS-ARM64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            display_name: 'macOS-Intel'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            display_name: 'Windows-x64-Standard'
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
            display_name: 'Windows-ARM64-Standard'

    runs-on: ${{ matrix.platform }}
    name: Build ${{ matrix.display_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Get Version (Windows)
        if: matrix.platform == 'windows-latest'
        id: get_version_windows
        shell: pwsh
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $env:GITHUB_OUTPUT

      - name: Get Version (Unix)
        if: matrix.platform != 'windows-latest'
        id: get_version_unix
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || matrix.platform == 'macos-14' && 'aarch64-apple-darwin' || contains(matrix.args, 'aarch64-pc-windows-msvc') && 'aarch64-pc-windows-msvc' || '' }}

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-14'
        run: |
          brew install openssl@3

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: pnpm install

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v') && matrix.platform == 'macos-14'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version_unix.outputs.version }}
          name: ${{ steps.get_version_unix.outputs.version }}
          draft: false
          prerelease: false

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with: 
          tagName: ${{ matrix.platform == 'windows-latest' && steps.get_version_windows.outputs.version || steps.get_version_unix.outputs.version }}
          releaseName: ${{ matrix.platform == 'windows-latest' && steps.get_version_windows.outputs.version || steps.get_version_unix.outputs.version }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true

  publish-webview2-fixed:
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            display_name: 'Windows-x64-FixedWebView2'
          - platform: 'windows-latest'
            target: 'aarch64-pc-windows-msvc'
            arch: 'arm64'
            display_name: 'Windows-ARM64-FixedWebView2'

    runs-on: ${{ matrix.platform }}
    name: Build ${{ matrix.display_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Get Version
        id: get_version
        shell: pwsh
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $env:GITHUB_OUTPUT

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: pnpm install

      - name: Prepare WebView2 Fixed Runtime
        shell: pwsh
        run: |
          # 创建WebView2配置文件
          $webviewConfigContent = @"
          {
            "bundle": {
              "windows": {
                "webviewInstallMode": {
                  "type": "fixedRuntime",
                  "path": "./webview2-runtime/${{ matrix.arch }}/"
                }
              }
            }
          }
          "@
          
          # 保存配置文件
          New-Item -Path "src-tauri" -Name "tauri.windows.conf.json" -ItemType "file" -Value $webviewConfigContent -Force
          
          # 下载WebView2运行时
          mkdir -p src-tauri/webview2-runtime/${{ matrix.arch }}
          
          # 根据架构选择不同的下载链接
          if ("${{ matrix.arch }}" -eq "x64") {
            Invoke-WebRequest -Uri "https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/949b4951-7f54-4504-8a73-ccad659afdb1/Microsoft.WebView2.FixedVersionRuntime.134.0.3124.72.x64.cab" -OutFile "webview2-runtime.cab"
          } else {
            Invoke-WebRequest -Uri "https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/abc49133-bb96-41e6-a555-8ea087ff4564/Microsoft.WebView2.FixedVersionRuntime.134.0.3124.72.arm64.cab" -OutFile "webview2-runtime.cab"
          }
          
          cmd /c "expand webview2-runtime.cab -F:* .\src-tauri\webview2-runtime\${{ matrix.arch }}\"
          
          # 验证文件是否存在
          if (Test-Path -Path "src-tauri/webview2-runtime/${{ matrix.arch }}") {
            Write-Host "WebView2 运行时目录已创建"
            Get-ChildItem -Path "src-tauri/webview2-runtime/${{ matrix.arch }}" | Select-Object -First 5
          }
          
          if (Test-Path -Path "src-tauri/tauri.windows.conf.json") {
            Write-Host "Windows配置文件已创建:"
            Get-Content -Path "src-tauri/tauri.windows.conf.json"
          }

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with: 
          tagName: ${{ steps.get_version.outputs.version }}
          releaseName: ${{ steps.get_version.outputs.version }}
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }} --config src-tauri/tauri.windows.conf.json
          includeUpdaterJson: false
          # 不包含更新JSON，避免覆盖标准版本的更新元数据

      - name: Rename and Upload Artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 查找并显示原始文件
          Write-Host "Original files:"
          Get-ChildItem -Path ".\src-tauri\target\${{ matrix.target }}\release\bundle\msi\*.msi" | ForEach-Object { Write-Host $_.FullName }
          Get-ChildItem -Path ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe" | ForEach-Object { Write-Host $_.FullName }
          
          # 创建临时目录用于存放重命名后的文件
          $uploadDir = ".\webview2-upload"
          New-Item -ItemType Directory -Path $uploadDir -Force
          
          # 重命名MSI文件并复制到上传目录
          $msiFiles = Get-ChildItem -Path ".\src-tauri\target\${{ matrix.target }}\release\bundle\msi\*.msi"
          foreach ($file in $msiFiles) {
            $newName = $file.Name -replace "\.msi$", "_fixed-webview2.msi"
            $newPath = Join-Path -Path $uploadDir -ChildPath $newName
            Copy-Item -Path $file.FullName -Destination $newPath -Force
            Write-Host "Prepared: $($file.Name) -> $newName"
            
            # 同时处理签名文件
            $sigFile = "$($file.FullName).sig"
            if (Test-Path $sigFile) {
              $newSigName = $newName + ".sig"
              $newSigPath = Join-Path -Path $uploadDir -ChildPath $newSigName
              Copy-Item -Path $sigFile -Destination $newSigPath -Force
              Write-Host "Prepared: $($file.Name).sig -> $newSigName"
            }
          }

          # 重命名NSIS安装程序并复制到上传目录
          $exeFiles = Get-ChildItem -Path ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $exeFiles) {
            $newName = $file.Name -replace "-setup\.exe$", "_fixed-webview2-setup.exe"
            $newPath = Join-Path -Path $uploadDir -ChildPath $newName
            Copy-Item -Path $file.FullName -Destination $newPath -Force
            Write-Host "Prepared: $($file.Name) -> $newName"
            
            # 同时处理签名文件
            $sigFile = "$($file.FullName).sig"
            if (Test-Path $sigFile) {
              $newSigName = $newName + ".sig"
              $newSigPath = Join-Path -Path $uploadDir -ChildPath $newSigName
              Copy-Item -Path $sigFile -Destination $newSigPath -Force
              Write-Host "Prepared: $($file.Name).sig -> $newSigName"
            }
          }
          
          # 显示准备上传的文件
          Write-Host "Files to upload:"
          Get-ChildItem -Path $uploadDir | ForEach-Object { Write-Host $_.FullName }
          
          # 使用GitHub CLI上传文件到Release
          Write-Host "Uploading files to GitHub Release..."
          $tag = "${{ steps.get_version.outputs.version }}"
          
          Get-ChildItem -Path $uploadDir | ForEach-Object {
            Write-Host "Uploading $($_.Name)..."
            gh release upload $tag $_.FullName --clobber
          }